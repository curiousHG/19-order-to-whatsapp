{"version":3,"file":"185.js","mappings":"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","sources":["webpack://frontend/./src/components/Bill.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TextField from \"@mui/material/TextField\";\nimport Delete from \"@mui/icons-material/Delete\";\nimport Edit from \"@mui/icons-material/Edit\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\nimport {\n  Autocomplete,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nconst Bill = () => {\n  const [data, setData] = useState([]);\n  const [order, setOrder] = useState([]);\n  const [item, setItem] = useState({}); // {name: \"\", price: 0, quantity: 0, total: 0}\n  const [price, setPrice] = useState(0);\n  const [quantity, setQuantity] = useState(1);\n  const [total, setTotal] = useState(0);\n\n  const [editMode, setEditMode] = useState(false);\n  const [selected, setSelected] = useState(0);\n\n  // run once\n  useEffect(() => {\n    axios\n      .get(\"/store/products\")\n      .then((res) => {\n        setData(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (item.id) {\n      const bool = order.some((i) => i.id === item.id);\n      if (!bool) {\n        item[\"quantity\"] = parseInt(quantity);\n        setOrder([...order, item]);\n        setTotal(total + item.price * quantity);\n      } else {\n        alert(\"Item already added\");\n      }\n    }\n    console.log(item);\n  };\n\n\n  // get prices\n\n  return (\n    <div\n      style={{\n        margin: \"0px\",\n        padding: \"5px\",\n        backgroundColor: \"white\",\n        height: \"100vh\",\n      }}\n    >\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Typography variant=\"h2\">Bill</Typography>\n      </div>\n      <Box sx={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n        <Autocomplete\n          id=\"free-solo-demo\"\n          freeSolo\n          getOptionLabel={(option) => option.name || \"\"}\n          renderOption={(props, option) => {\n            return (\n              <li {...props} key={option.id}>\n                <Typography noWrap>\n                  {option.name}\n                </Typography>\n              </li>)\n          }}\n          options={data.map((option) => option)}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Search\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n\n          )}\n          sx={{ width: 300 }}\n          onChange={(e, value) => {\n            if (value) {\n              setItem(value);\n            }\n          }}\n        />\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Quantity\"\n          variant=\"outlined\"\n          type=\"number\"\n          InputProps={{ inputProps: { min: 1 } }}\n\n          value={quantity}\n          onChange={(e) => {\n            if (e.target.value > 0) {\n              setQuantity(e.target.value);\n            }\n          }}\n          style={{\n            position: \"relative\",\n            top: \"4px\",\n          }}\n        />\n        <Button variant=\"contained\"\n          sx={{ marginLeft: \"10px\" }} onClick={handleAdd}>\n          Add\n        </Button>\n      </Box>\n      <Box>\n        <TableContainer component={Paper}>\n          <Table sx={{\n            minWidth: 650,\n            border: \"1px solid #ddd\",\n          }} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow sx={{ backgroundColor: \"#f9f9f9\", border: \"1px solid #ddd\" }}>\n                <TableCell align=\"center\">ID</TableCell>\n                <TableCell>Product Name</TableCell>\n                <TableCell align=\"right\">Price</TableCell>\n                <TableCell align=\"right\">Quantity</TableCell>\n                <TableCell align=\"right\">Total</TableCell>\n                <TableCell align=\"right\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {order.length > 0 && order.map((item, key) => {\n                console.log(key);\n                return (\n                  <TableRow\n                    key={item.id}\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 1 } }}\n                  >\n                    <TableCell padding=\"checkbox\" align=\"center\">\n                      {key + 1}\n                    </TableCell>\n\n                    <TableCell component=\"th\" scope=\"row\">\n                      {item.name}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {editMode && selected === key ? (\n                        <TextField\n                          id=\"standard-basic\"\n                          label=\"\"\n                          variant=\"standard\"\n                          type=\"number\"\n                          InputProps={{ inputProps: { min: 1 } }}\n                          value = {item.price}\n                          onChange={(e) => {\n                            const newOrder = [...order];\n                            newOrder[key].price = e.target.value;\n                            setOrder(newOrder);\n                              \n                            }\n                          }\n                          // on out of focus change edit mode\n                          onBlur={() => {\n                            setEditMode(false);\n                            setSelected(0);\n                          }}\n                        />\n                      ) : (\n                        item.price\n                      )}\n\n                            \n                    </TableCell>\n                    <TableCell align=\"right\">\n                    {editMode && selected === key ? (\n                        <TextField\n                          id=\"standard-basic\"\n                          label=\"\"\n                          variant=\"standard\"\n                          type=\"number\"\n                          InputProps={{ inputProps: { min: 1 } }}\n                          value = {item.quantity}\n                          onChange={(e) => {\n                            const newOrder = [...order];\n                            newOrder[key].quantity = e.target.value;\n                            setOrder(newOrder);\n                              \n                            }\n                          }\n                          align=\"right\"\n                        />\n                      ) : (\n                        item.quantity\n                      )}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {item.price * item.quantity}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        aria-label=\"delete\"\n                        onClick={() => {\n                          const newOrder = [...order];\n                          newOrder.splice(key, 1);\n                          setOrder(newOrder);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                      <IconButton\n                        aria-label=\"edit\"\n                        onClick={() => {\n                          setEditMode(true);\n                          setSelected(key);\n                          setItem(item);\n                          setQuantity(item.quantity);\n                        }}\n                      >\n                        <Edit />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n              <TableRow>\n                <TableCell colSpan={4} align=\"right\">\n                  Total\n                </TableCell>\n                <TableCell align=\"right\">\n                  {order.length > 0 && order.reduce((a, b) => a + b.price * b.quantity, 0)}\n                </TableCell>\n              </TableRow>\n\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n      {/* <Box sx={{border: '1px solid grey', marginTop: '10px' }}>\n        <DataGrid\n          rows={order}\n          getRowId={(row) => row.id}\n          columns={[\n            { field: 'name', headerName: 'Product Name', width: 200 },\n            { field: 'price', headerName: 'Price', width: 200 },\n            { field: 'quantity', headerName: 'Quantity', width: 200 },\n            { field: 'total', headerName: 'Total', width: 200 },\n            {\n              field: 'Actions',\n              headerName: 'Delete',\n              width: 200,\n              renderCell: (params) => (\n                <IconButton\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    const newOrder = [...order];\n                    newOrder.splice(params.rowIndex, 1);\n                    setOrder(newOrder);\n                  }}\n                >\n                  <Delete />\n                </IconButton>\n              )\n            },\n          ]}\n          pageSize={5}\n          rowsPerPageOptions={[5]}\n          checkboxSelection\n          disableSelectionOnClick\n        />\n      </Box> */}\n\n    </div>\n  );\n};\n\nexport default Bill;\n"],"names":["Bill","data","setData","useState","order","setOrder","item","setItem","price","setPrice","quantity","setQuantity","total","setTotal","editMode","setEditMode","selected","setSelected","useEffect","axios","then","res","catch","err","console","log","React","style","margin","padding","backgroundColor","height","display","justifyContent","Typography","variant","Box","sx","alignItems","Autocomplete","id","freeSolo","getOptionLabel","option","name","renderOption","props","_extends","key","noWrap","options","map","renderInput","params","TextField","label","width","onChange","e","value","type","InputProps","inputProps","min","target","position","top","Button","marginLeft","onClick","preventDefault","some","i","alert","parseInt","TableContainer","component","Paper","Table","minWidth","border","TableHead","TableRow","TableCell","align","TableBody","length","scope","newOrder","onBlur","IconButton","splice","Delete","Edit","colSpan","reduce","a","b"],"sourceRoot":""}